package com.cardio_generator.outputs;

import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.concurrent.ConcurrentHashMap;

/**
 * An output strategy that outputs the data to files to the base directory
 */

//Changed class name to UpperCamelCase
public class FileOutputStrategy implements OutputStrategy {
    
    //Changed variable name to lowerCamelCase
    private String baseDirectory;

    public final ConcurrentHashMap<String, String> file_map = new ConcurrentHashMap<>();

    public FileOutputStrategy(String baseDirectory) {

        this.baseDirectory = baseDirectory;
    }

    /**
     * Outputs the generated data to a file in the base directory
     * @param patientId The unique ID of a patient
     * @param timestamp The exact time the data was generated
     * @param label The label describing what the data generated is
     * @param data The data that is generated by the output and written to the file
     */

    @Override
    public void output(int patientId, long timestamp, String label, String data) {
        try {
            // Create the directory
            //Added a whitespace after closing parenthesis
            Files.createDirectories(Paths.get(baseDirectory) );
        } catch (IOException e) {
            System.err.println("Error creating base directory: " + e.getMessage() );
            return;
        }
        // Set the FilePath variable
        //Added a whitespace after closing parenthesis
        String FilePath = file_map.computeIfAbsent(label, k -> Paths.get(baseDirectory, label + ".txt").toString() );

        // Write the data to the file
        try (PrintWriter out = new PrintWriter(
                Files.newBufferedWriter(Paths.get(FilePath), StandardOpenOption.CREATE, 
                //Added two whitespaces after closing parentheses
                StandardOpenOption.APPEND) ) ) {
            out.printf("Patient ID: %d, Timestamp: %d, Label: %s, Data: %s%n", patientId, timestamp, label, data);
        } catch (Exception e) {
            System.err.println("Error writing to file " + FilePath + ": " + e.getMessage());
        }
    }
}